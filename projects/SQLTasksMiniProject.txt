/* Welcome to the SQL mini project. You will carry out this project partly in
the PHPMyAdmin interface, and partly in Jupyter via a Python connection.
 
PART 1: PHPMyAdmin
You will complete questions 1-9 below in the PHPMyAdmin interface. 
Log in by pasting the following URL into your browser, and
using the following Username and Password:

URL: https://sql.springboard.com/
Username: student
Password: learn_sql@springboard

The data you need is in the "country_club" database. This database
contains 3 tables:
    i) the "Bookings" table,
    ii) the "Facilities" table, and
    iii) the "Members" table.

In this case study, you'll be asked a series of questions. You can
solve them using the platform, but for the final deliverable,
paste the code for each solution into this script, and upload it
to your GitHub.


/* QUESTIONS 

/* Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do. */
Ans:  SELECT name FROM Facilities
      WHERE membercost > 0


/* Q2: How many facilities do not charge a fee to members? */

Ans: Select COUNT(name) FROM Facilities
     WHERE membercost = 0 


/* Q3: Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */

Ans:  SELECT `facid`, `name`, `membercost`, `monthlymaintenance` FROM `Facilities` 
      WHERE membercost < 0.2 * monthlymaintenance
 

/* Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator. */
Ans:SELECT * FROM Facilities
    WHERE facid IN(1, 5);
 
/* Q5: Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question. */
Ans: Select name, monthlymaintenance,
     CASE WHEN monthlymaintenance > 100 THEN 'expensive'
     ELSE 'cheap' END
     AS maintenance_category
     FROM Facilities;

/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution. */

Ans: SELECT firstname,surname,MAX(joindate) from Members;  


/* Q7: Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */

Ans: SELECT DISTINCT m.memid,concat(m.firstname, m.surname) AS MemberName,f.name AS NameOfCourt
     FROM Members as m INNER JOIN Bookings as b
     ON m.memid = b.memid
     INNER JOIN Facilities as f 
     ON b.facid = f.facid 
     WHERE f.facid IN(0,1)
     ORDER BY MemberName;

/* Q8: Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */

Answer:
SELECT f.name AS FacilityName,concat(m.firstname, m.surname) AS MemberName,
CASE WHEN m.memid =0
THEN b.slots * f.guestcost
ELSE b.slots * f.membercost
END as cost
FROM Facilities AS f
INNER JOIN Bookings AS b ON f.facid = b.facid
INNER JOIN Members m ON b.memid = m.memid
WHERE DATE( STR_TO_DATE( b.starttime, '%Y-%m-%d %H:%i:%s' ) ) = '2012-09-14'
AND (
CASE WHEN m.memid =0
THEN b.slots * f.guestcost
ELSE b.slots * f.membercost
END
)>30
ORDER BY cost DESC;


/* Q9: This time, produce the same result as in Q8, but using a subquery. */
Answer:
     Select Tab.cost,concat(m.firstname,m.surname) as MemberName,Tab.name as facilityName from (SELECT CASE WHEN memid =0
     THEN b.slots * f.guestcost
     ELSE b.slots * f.membercost
     END AS cost,f.name,memid
     FROM Facilities f 
     INNER JOIN Bookings b ON b.facid = f.facid
     WHERE DATE( STR_TO_DATE( b.starttime, '%Y-%m-%d %H:%i:%s' ) ) = '2012-09-14'
     ) AS Tab INNER JOIN Members m on Tab.memid = m.memid
     WHERE Tab.cost > 30
     ORDER BY Tab.cost DESC;

/* PART 2: SQLite
/* We now want you to jump over to a local instance of the database on your machine. 

QUESTIONS:
/* Q10: Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members! */

Answer:
SELECT f.name AS FacilityName, SUM(
CASE WHEN memid =0
THEN b.slots * f.guestcost
ELSE b.slots * f.membercost
END ) AS total_revenue
FROM Facilities AS f
INNER JOIN Bookings b ON f.facid = b.facid
GROUP BY FacilityName
HAVING SUM(
CASE WHEN memid =0
THEN b.slots * f.guestcost
ELSE b.slots * f.membercost
END ) <1000
ORDER BY total_revenue
 

/* Q11: Produce a report of members and who recommended them in alphabetic surname,firstname order */
   
**Using self-join to solve this query
Answer:
Select distinct m.firstname,m.surname , concat(r.firstname, r.surname)as recommenderName
From Members m , Members r
where r.memid = m.recommendedby
Order by m.firstname, m.surname;


/* Q12: Find the facilities with their usage by member, but not guests */

Answer:
Select f.name as FacilityName, Count(b.facid) as MemberUsage , b.memid
from Facilities f 
INNER JOIN Bookings b 
ON f.facid = b.facid
where b.memid <> 0
Group by f.name
Order by MemberUsage DESC;


/* Q13: Find the facilities usage by month, but not guests */
  
Answer:
Select f.name as FacilityName,count(b.memid), DATE_FORMAT(starttime,'%m') AS month
from Bookings b  
LEFT JOIN Facilities f
ON f.facid = b.facid
where b.memid <> 0
Group by month
Order by month; 

/*Ref: To extract month from starttime , eg:-SELECT DATE_FORMAT(test_date,'%Y%m') AS date FROM test_table;
##https://stackoverflow.com/questions/7830987/how-do-i-extract-month-and-year-in-a-mysql-date-and-compare-them/7831070
